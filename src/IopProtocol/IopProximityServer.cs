// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IopProximityServer.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Iop.Proximityserver {

  /// <summary>Holder for reflection information generated from IopProximityServer.proto</summary>
  public static partial class IopProximityServerReflection {

    #region Descriptor
    /// <summary>File descriptor for IopProximityServer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IopProximityServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhJb3BQcm94aW1pdHlTZXJ2ZXIucHJvdG8SE2lvcC5wcm94aW1pdHlzZXJ2",
            "ZXIiTwoRTWVzc2FnZVdpdGhIZWFkZXISDgoGaGVhZGVyGAEgASgHEioKBGJv",
            "ZHkYAiABKAsyHC5pb3AucHJveGltaXR5c2VydmVyLk1lc3NhZ2UiiAEKB01l",
            "c3NhZ2USCgoCaWQYASABKA0SLwoHcmVxdWVzdBgCIAEoCzIcLmlvcC5wcm94",
            "aW1pdHlzZXJ2ZXIuUmVxdWVzdEgAEjEKCHJlc3BvbnNlGAMgASgLMh0uaW9w",
            "LnByb3hpbWl0eXNlcnZlci5SZXNwb25zZUgAQg0KC01lc3NhZ2VUeXBlIqMB",
            "CgdSZXF1ZXN0EjsKDXNpbmdsZVJlcXVlc3QYASABKAsyIi5pb3AucHJveGlt",
            "aXR5c2VydmVyLlNpbmdsZVJlcXVlc3RIABJHChNjb252ZXJzYXRpb25SZXF1",
            "ZXN0GAIgASgLMiguaW9wLnByb3hpbWl0eXNlcnZlci5Db252ZXJzYXRpb25S",
            "ZXF1ZXN0SABCEgoQQ29udmVyc2F0aW9uVHlwZSL5AQoIUmVzcG9uc2USKwoG",
            "c3RhdHVzGAEgASgOMhsuaW9wLnByb3hpbWl0eXNlcnZlci5TdGF0dXMSEQoJ",
            "dGltZXN0YW1wGAIgASgSEg8KB2RldGFpbHMYAyABKAkSPQoOc2luZ2xlUmVz",
            "cG9uc2UYCCABKAsyIy5pb3AucHJveGltaXR5c2VydmVyLlNpbmdsZVJlc3Bv",
            "bnNlSAASSQoUY29udmVyc2F0aW9uUmVzcG9uc2UYCSABKAsyKS5pb3AucHJv",
            "eGltaXR5c2VydmVyLkNvbnZlcnNhdGlvblJlc3BvbnNlSABCEgoQQ29udmVy",
            "c2F0aW9uVHlwZSKdAQoNU2luZ2xlUmVxdWVzdBIPCgd2ZXJzaW9uGAEgASgM",
            "EjAKBHBpbmcYAiABKAsyIC5pb3AucHJveGltaXR5c2VydmVyLlBpbmdSZXF1",
            "ZXN0SAASOgoJbGlzdFJvbGVzGAMgASgLMiUuaW9wLnByb3hpbWl0eXNlcnZl",
            "ci5MaXN0Um9sZXNSZXF1ZXN0SABCDQoLUmVxdWVzdFR5cGUioQEKDlNpbmds",
            "ZVJlc3BvbnNlEg8KB3ZlcnNpb24YASABKAwSMQoEcGluZxgCIAEoCzIhLmlv",
            "cC5wcm94aW1pdHlzZXJ2ZXIuUGluZ1Jlc3BvbnNlSAASOwoJbGlzdFJvbGVz",
            "GAMgASgLMiYuaW9wLnByb3hpbWl0eXNlcnZlci5MaXN0Um9sZXNSZXNwb25z",
            "ZUgAQg4KDFJlc3BvbnNlVHlwZSK9AQoTQ29udmVyc2F0aW9uUmVxdWVzdBIR",
            "CglzaWduYXR1cmUYASABKAwSPgoFc3RhcnQYAiABKAsyLS5pb3AucHJveGlt",
            "aXR5c2VydmVyLlN0YXJ0Q29udmVyc2F0aW9uUmVxdWVzdEgAEkQKDnZlcmlm",
            "eUlkZW50aXR5GAMgASgLMiouaW9wLnByb3hpbWl0eXNlcnZlci5WZXJpZnlJ",
            "ZGVudGl0eVJlcXVlc3RIAEINCgtSZXF1ZXN0VHlwZSLBAQoUQ29udmVyc2F0",
            "aW9uUmVzcG9uc2USEQoJc2lnbmF0dXJlGAEgASgMEj8KBXN0YXJ0GAIgASgL",
            "Mi4uaW9wLnByb3hpbWl0eXNlcnZlci5TdGFydENvbnZlcnNhdGlvblJlc3Bv",
            "bnNlSAASRQoOdmVyaWZ5SWRlbnRpdHkYAyABKAsyKy5pb3AucHJveGltaXR5",
            "c2VydmVyLlZlcmlmeUlkZW50aXR5UmVzcG9uc2VIAEIOCgxSZXNwb25zZVR5",
            "cGUiHgoLUGluZ1JlcXVlc3QSDwoHcGF5bG9hZBgBIAEoDCIuCgxQaW5nUmVz",
            "cG9uc2USDwoHcGF5bG9hZBgBIAEoDBINCgVjbG9jaxgCIAEoEiISChBMaXN0",
            "Um9sZXNSZXF1ZXN0IkMKEUxpc3RSb2xlc1Jlc3BvbnNlEi4KBXJvbGVzGAEg",
            "AygLMh8uaW9wLnByb3hpbWl0eXNlcnZlci5TZXJ2ZXJSb2xlImsKClNlcnZl",
            "clJvbGUSMQoEcm9sZRgBIAEoDjIjLmlvcC5wcm94aW1pdHlzZXJ2ZXIuU2Vy",
            "dmVyUm9sZVR5cGUSDAoEcG9ydBgCIAEoDRINCgVpc1RjcBgDIAEoCBINCgVp",
            "c1RscxgEIAEoCCJhChhTdGFydENvbnZlcnNhdGlvblJlcXVlc3QSGQoRc3Vw",
            "cG9ydGVkVmVyc2lvbnMYASADKAwSEQoJcHVibGljS2V5GAIgASgMEhcKD2Ns",
            "aWVudENoYWxsZW5nZRgDIAEoDCJrChlTdGFydENvbnZlcnNhdGlvblJlc3Bv",
            "bnNlEg8KB3ZlcnNpb24YASABKAwSEQoJcHVibGljS2V5GAIgASgMEhEKCWNo",
            "YWxsZW5nZRgDIAEoDBIXCg9jbGllbnRDaGFsbGVuZ2UYBCABKAwiKgoVVmVy",
            "aWZ5SWRlbnRpdHlSZXF1ZXN0EhEKCWNoYWxsZW5nZRgBIAEoDCIYChZWZXJp",
            "ZnlJZGVudGl0eVJlc3BvbnNlKpYDCgZTdGF0dXMSDQoJU1RBVFVTX09LEAAS",
            "HAoYRVJST1JfUFJPVE9DT0xfVklPTEFUSU9OEAESFQoRRVJST1JfVU5TVVBQ",
            "T1JURUQQAhIQCgxFUlJPUl9CQU5ORUQQAxIOCgpFUlJPUl9CVVNZEAQSFgoS",
            "RVJST1JfVU5BVVRIT1JJWkVEEAUSEgoORVJST1JfQkFEX1JPTEUQBhIhCh1F",
            "UlJPUl9CQURfQ09OVkVSU0FUSU9OX1NUQVRVUxAHEhIKDkVSUk9SX0lOVEVS",
            "TkFMEAgSGAoURVJST1JfUVVPVEFfRVhDRUVERUQQMxIbChdFUlJPUl9JTlZB",
            "TElEX1NJR05BVFVSRRA0EhMKD0VSUk9SX05PVF9GT1VORBA1EhcKE0VSUk9S",
            "X0lOVkFMSURfVkFMVUUQNhIYChRFUlJPUl9BTFJFQURZX0VYSVNUUxA3EhcK",
            "E0VSUk9SX05PVF9BVkFJTEFCTEUQOBISCg5FUlJPUl9SRUpFQ1RFRBA5EhcK",
            "E0VSUk9SX1VOSU5JVElBTElaRUQQOio3Cg5TZXJ2ZXJSb2xlVHlwZRILCgdQ",
            "UklNQVJZEAASDAoITkVJR0hCT1IQARIKCgZDTElFTlQQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Iop.Proximityserver.Status), typeof(global::Iop.Proximityserver.ServerRoleType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.MessageWithHeader), global::Iop.Proximityserver.MessageWithHeader.Parser, new[]{ "Header", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.Message), global::Iop.Proximityserver.Message.Parser, new[]{ "Id", "Request", "Response" }, new[]{ "MessageType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.Request), global::Iop.Proximityserver.Request.Parser, new[]{ "SingleRequest", "ConversationRequest" }, new[]{ "ConversationType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.Response), global::Iop.Proximityserver.Response.Parser, new[]{ "Status", "Timestamp", "Details", "SingleResponse", "ConversationResponse" }, new[]{ "ConversationType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.SingleRequest), global::Iop.Proximityserver.SingleRequest.Parser, new[]{ "Version", "Ping", "ListRoles" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.SingleResponse), global::Iop.Proximityserver.SingleResponse.Parser, new[]{ "Version", "Ping", "ListRoles" }, new[]{ "ResponseType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.ConversationRequest), global::Iop.Proximityserver.ConversationRequest.Parser, new[]{ "Signature", "Start", "VerifyIdentity" }, new[]{ "RequestType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.ConversationResponse), global::Iop.Proximityserver.ConversationResponse.Parser, new[]{ "Signature", "Start", "VerifyIdentity" }, new[]{ "ResponseType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.PingRequest), global::Iop.Proximityserver.PingRequest.Parser, new[]{ "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.PingResponse), global::Iop.Proximityserver.PingResponse.Parser, new[]{ "Payload", "Clock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.ListRolesRequest), global::Iop.Proximityserver.ListRolesRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.ListRolesResponse), global::Iop.Proximityserver.ListRolesResponse.Parser, new[]{ "Roles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.ServerRole), global::Iop.Proximityserver.ServerRole.Parser, new[]{ "Role", "Port", "IsTcp", "IsTls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.StartConversationRequest), global::Iop.Proximityserver.StartConversationRequest.Parser, new[]{ "SupportedVersions", "PublicKey", "ClientChallenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.StartConversationResponse), global::Iop.Proximityserver.StartConversationResponse.Parser, new[]{ "Version", "PublicKey", "Challenge", "ClientChallenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.VerifyIdentityRequest), global::Iop.Proximityserver.VerifyIdentityRequest.Parser, new[]{ "Challenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Iop.Proximityserver.VerifyIdentityResponse), global::Iop.Proximityserver.VerifyIdentityResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  Return codes to requests that inform requestor about whether the operation completed successfully or which error occurred.
  /// </summary>
  public enum Status {
    /// <summary>
    ///  General codes that can be returned to any message.
    /// </summary>
    [pbr::OriginalName("STATUS_OK")] Ok = 0,
    /// <summary>
    ///  The incoming request does not follow the protocol.
    /// </summary>
    [pbr::OriginalName("ERROR_PROTOCOL_VIOLATION")] ErrorProtocolViolation = 1,
    /// <summary>
    ///  The peer does not support the request. This is returned when a peer sends a message with an unsupported protocol version.
    /// </summary>
    [pbr::OriginalName("ERROR_UNSUPPORTED")] ErrorUnsupported = 2,
    /// <summary>
    ///  The peer will not process the request bacause the requestor is on the blacklist. Information about the blacklist entry expiration is provided in 'Response.timestamp'.
    /// </summary>
    [pbr::OriginalName("ERROR_BANNED")] ErrorBanned = 3,
    /// <summary>
    ///  The peer will not process the request because it is too busy. The requestor can try later.
    /// </summary>
    [pbr::OriginalName("ERROR_BUSY")] ErrorBusy = 4,
    /// <summary>
    ///  Within conversation, some requests require authorization of the peer before certain requests are allowed.
    /// </summary>
    [pbr::OriginalName("ERROR_UNAUTHORIZED")] ErrorUnauthorized = 5,
    /// <summary>
    ///  If a request is sent to a port that does not handle the specific role, this error is returned.
    /// </summary>
    [pbr::OriginalName("ERROR_BAD_ROLE")] ErrorBadRole = 6,
    /// <summary>
    ///  The conversation status is different from what the message requires.
    /// </summary>
    [pbr::OriginalName("ERROR_BAD_CONVERSATION_STATUS")] ErrorBadConversationStatus = 7,
    /// <summary>
    ///  Internal error occurred while processing the message.
    /// </summary>
    [pbr::OriginalName("ERROR_INTERNAL")] ErrorInternal = 8,
    /// <summary>
    ///  Return codes specific to a request.
    /// </summary>
    [pbr::OriginalName("ERROR_QUOTA_EXCEEDED")] ErrorQuotaExceeded = 51,
    /// <summary>
    ///  The signature provided be the peer does not correspond to the peer's key or the message being signed.
    /// </summary>
    [pbr::OriginalName("ERROR_INVALID_SIGNATURE")] ErrorInvalidSignature = 52,
    /// <summary>
    ///  A referenced object was not found.
    /// </summary>
    [pbr::OriginalName("ERROR_NOT_FOUND")] ErrorNotFound = 53,
    /// <summary>
    ///  One of the values provided is invalid.
    /// </summary>
    [pbr::OriginalName("ERROR_INVALID_VALUE")] ErrorInvalidValue = 54,
    /// <summary>
    ///  An object with the same identifier already exists.
    /// </summary>
    [pbr::OriginalName("ERROR_ALREADY_EXISTS")] ErrorAlreadyExists = 55,
    /// <summary>
    ///  A request object is not available.
    /// </summary>
    [pbr::OriginalName("ERROR_NOT_AVAILABLE")] ErrorNotAvailable = 56,
    /// <summary>
    ///  A third party rejected the requested action.
    /// </summary>
    [pbr::OriginalName("ERROR_REJECTED")] ErrorRejected = 57,
    /// <summary>
    ///  The requested object can not be obtained, queried or used as it is not initialized.
    /// </summary>
    [pbr::OriginalName("ERROR_UNINITIALIZED")] ErrorUninitialized = 58,
  }

  /// <summary>
  ///  Known server roles.
  /// </summary>
  public enum ServerRoleType {
    /// <summary>
    ///  Primary Interface server role.
    /// </summary>
    [pbr::OriginalName("PRIMARY")] Primary = 0,
    /// <summary>
    ///  Neighbors Interface server role.
    /// </summary>
    [pbr::OriginalName("NEIGHBOR")] Neighbor = 1,
    /// <summary>
    ///  Clients Interface server role.
    /// </summary>
    [pbr::OriginalName("CLIENT")] Client = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  This is complete message as it goes over the wire. It includes the 32-bit header with message length.
  ///
  ///  There is a 1 byte prefix because of Google Protobuf protocol, so the actual binary data for a message
  ///  with body size 4660 bytes would be:
  ///
  ///    0D 34 12 00 00
  ///
  ///  where 0x0D means type 'fixed32' (which value is 5) + index of 'header', which is 1 &lt;&lt; 3,
  ///  this is followed be the 4 byte sequence 34 12 00 00, which is little endian of 0x00001234, which is 4,660 decimal.
  ///  Thus the total number of bytes sent over the wire for this message would be 4,665 bytes.
  /// </summary>
  public sealed partial class MessageWithHeader : pb::IMessage<MessageWithHeader> {
    private static readonly pb::MessageParser<MessageWithHeader> _parser = new pb::MessageParser<MessageWithHeader>(() => new MessageWithHeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageWithHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader(MessageWithHeader other) : this() {
      header_ = other.header_;
      Body = other.body_ != null ? other.Body.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageWithHeader Clone() {
      return new MessageWithHeader(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private uint header_;
    /// <summary>
    ///  Message length (without the size of the header) as a little-endian 32-bit unsigned integer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private global::Iop.Proximityserver.Message body_;
    /// <summary>
    ///  Message itself.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.Message Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageWithHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageWithHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Header != other.Header) return false;
      if (!object.Equals(Body, other.Body)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Header != 0) hash ^= Header.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Header != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Header);
      }
      if (body_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Header != 0) {
        size += 1 + 4;
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageWithHeader other) {
      if (other == null) {
        return;
      }
      if (other.Header != 0) {
        Header = other.Header;
      }
      if (other.body_ != null) {
        if (body_ == null) {
          body_ = new global::Iop.Proximityserver.Message();
        }
        Body.MergeFrom(other.Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Header = input.ReadFixed32();
            break;
          }
          case 18: {
            if (body_ == null) {
              body_ = new global::Iop.Proximityserver.Message();
            }
            input.ReadMessage(body_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Format of a single message.
  /// </summary>
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      id_ = other.id_;
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.Request:
          Request = other.Request.Clone();
          break;
        case MessageTypeOneofCase.Response:
          Response = other.Response.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  Requestor defined message ID that the requestee has to return in the response. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 2;
    /// <summary>
    ///   * a new request,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.Request Request {
      get { return messageTypeCase_ == MessageTypeOneofCase.Request ? (global::Iop.Proximityserver.Request) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Request;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 3;
    /// <summary>
    ///   * or response to a previous request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.Response Response {
      get { return messageTypeCase_ == MessageTypeOneofCase.Response ? (global::Iop.Proximityserver.Response) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Response;
      }
    }

    private object messageType_;
    /// <summary>Enum of possible cases for the "MessageType" oneof.</summary>
    public enum MessageTypeOneofCase {
      None = 0,
      Request = 2,
      Response = 3,
    }
    private MessageTypeOneofCase messageTypeCase_ = MessageTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTypeOneofCase MessageTypeCase {
      get { return messageTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageType() {
      messageTypeCase_ = MessageTypeOneofCase.None;
      messageType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      if (MessageTypeCase != other.MessageTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Request) hash ^= Request.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Response) hash ^= Response.GetHashCode();
      hash ^= (int) messageTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Request) {
        output.WriteRawTag(18);
        output.WriteMessage(Request);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Response) {
        output.WriteRawTag(26);
        output.WriteMessage(Response);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Request) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Response) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.Request:
          Request = other.Request;
          break;
        case MessageTypeOneofCase.Response:
          Response = other.Response;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            global::Iop.Proximityserver.Request subBuilder = new global::Iop.Proximityserver.Request();
            if (messageTypeCase_ == MessageTypeOneofCase.Request) {
              subBuilder.MergeFrom(Request);
            }
            input.ReadMessage(subBuilder);
            Request = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Proximityserver.Response subBuilder = new global::Iop.Proximityserver.Response();
            if (messageTypeCase_ == MessageTypeOneofCase.Response) {
              subBuilder.MergeFrom(Response);
            }
            input.ReadMessage(subBuilder);
            Response = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Every conversation starts with a request of a requestor.
  ///  This can be either a single request, for which it is expected to receive a single response,
  ///  or this can be part of a longer conversation between the peers.
  /// </summary>
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleRequest:
          SingleRequest = other.SingleRequest.Clone();
          break;
        case ConversationTypeOneofCase.ConversationRequest:
          ConversationRequest = other.ConversationRequest.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "singleRequest" field.</summary>
    public const int SingleRequestFieldNumber = 1;
    /// <summary>
    ///  Single requests are requests that are supposed to be sent without further context.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.SingleRequest SingleRequest {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest ? (global::Iop.Proximityserver.SingleRequest) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.SingleRequest;
      }
    }

    /// <summary>Field number for the "conversationRequest" field.</summary>
    public const int ConversationRequestFieldNumber = 2;
    /// <summary>
    ///  Conversation requests form a session with a context that has to be maintained by peers in order to correctly interpret the messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.ConversationRequest ConversationRequest {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest ? (global::Iop.Proximityserver.ConversationRequest) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.ConversationRequest;
      }
    }

    private object conversationType_;
    /// <summary>Enum of possible cases for the "ConversationType" oneof.</summary>
    public enum ConversationTypeOneofCase {
      None = 0,
      SingleRequest = 1,
      ConversationRequest = 2,
    }
    private ConversationTypeOneofCase conversationTypeCase_ = ConversationTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationTypeOneofCase ConversationTypeCase {
      get { return conversationTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConversationType() {
      conversationTypeCase_ = ConversationTypeOneofCase.None;
      conversationType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SingleRequest, other.SingleRequest)) return false;
      if (!object.Equals(ConversationRequest, other.ConversationRequest)) return false;
      if (ConversationTypeCase != other.ConversationTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) hash ^= SingleRequest.GetHashCode();
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) hash ^= ConversationRequest.GetHashCode();
      hash ^= (int) conversationTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(SingleRequest);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) {
        output.WriteRawTag(18);
        output.WriteMessage(ConversationRequest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleRequest);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationRequest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleRequest:
          SingleRequest = other.SingleRequest;
          break;
        case ConversationTypeOneofCase.ConversationRequest:
          ConversationRequest = other.ConversationRequest;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Iop.Proximityserver.SingleRequest subBuilder = new global::Iop.Proximityserver.SingleRequest();
            if (conversationTypeCase_ == ConversationTypeOneofCase.SingleRequest) {
              subBuilder.MergeFrom(SingleRequest);
            }
            input.ReadMessage(subBuilder);
            SingleRequest = subBuilder;
            break;
          }
          case 18: {
            global::Iop.Proximityserver.ConversationRequest subBuilder = new global::Iop.Proximityserver.ConversationRequest();
            if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationRequest) {
              subBuilder.MergeFrom(ConversationRequest);
            }
            input.ReadMessage(subBuilder);
            ConversationRequest = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  To every request there is a response.
  /// </summary>
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      status_ = other.status_;
      timestamp_ = other.timestamp_;
      details_ = other.details_;
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleResponse:
          SingleResponse = other.SingleResponse.Clone();
          break;
        case ConversationTypeOneofCase.ConversationResponse:
          ConversationResponse = other.ConversationResponse.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Iop.Proximityserver.Status status_ = 0;
    /// <summary>
    ///  Return code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    /// <summary>
    ///  TimestampType. If status is ERROR_BANNED, this field specifies when the blacklist entry expires.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 3;
    private string details_ = "";
    /// <summary>
    ///  In case of an error, this field may contain additional details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Details {
      get { return details_; }
      set {
        details_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "singleResponse" field.</summary>
    public const int SingleResponseFieldNumber = 8;
    /// <summary>
    ///  Responses to single requests are sent as single responses,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.SingleResponse SingleResponse {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse ? (global::Iop.Proximityserver.SingleResponse) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.SingleResponse;
      }
    }

    /// <summary>Field number for the "conversationResponse" field.</summary>
    public const int ConversationResponseFieldNumber = 9;
    /// <summary>
    ///  responses to conversation requests are sent as conversation responses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.ConversationResponse ConversationResponse {
      get { return conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse ? (global::Iop.Proximityserver.ConversationResponse) conversationType_ : null; }
      set {
        conversationType_ = value;
        conversationTypeCase_ = value == null ? ConversationTypeOneofCase.None : ConversationTypeOneofCase.ConversationResponse;
      }
    }

    private object conversationType_;
    /// <summary>Enum of possible cases for the "ConversationType" oneof.</summary>
    public enum ConversationTypeOneofCase {
      None = 0,
      SingleResponse = 8,
      ConversationResponse = 9,
    }
    private ConversationTypeOneofCase conversationTypeCase_ = ConversationTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationTypeOneofCase ConversationTypeCase {
      get { return conversationTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConversationType() {
      conversationTypeCase_ = ConversationTypeOneofCase.None;
      conversationType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Details != other.Details) return false;
      if (!object.Equals(SingleResponse, other.SingleResponse)) return false;
      if (!object.Equals(ConversationResponse, other.ConversationResponse)) return false;
      if (ConversationTypeCase != other.ConversationTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Details.Length != 0) hash ^= Details.GetHashCode();
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) hash ^= SingleResponse.GetHashCode();
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) hash ^= ConversationResponse.GetHashCode();
      hash ^= (int) conversationTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Timestamp);
      }
      if (Details.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Details);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) {
        output.WriteRawTag(66);
        output.WriteMessage(SingleResponse);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) {
        output.WriteRawTag(74);
        output.WriteMessage(ConversationResponse);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Timestamp);
      }
      if (Details.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Details);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleResponse);
      }
      if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationResponse);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Details.Length != 0) {
        Details = other.Details;
      }
      switch (other.ConversationTypeCase) {
        case ConversationTypeOneofCase.SingleResponse:
          SingleResponse = other.SingleResponse;
          break;
        case ConversationTypeOneofCase.ConversationResponse:
          ConversationResponse = other.ConversationResponse;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Iop.Proximityserver.Status) input.ReadEnum();
            break;
          }
          case 16: {
            Timestamp = input.ReadSInt64();
            break;
          }
          case 26: {
            Details = input.ReadString();
            break;
          }
          case 66: {
            global::Iop.Proximityserver.SingleResponse subBuilder = new global::Iop.Proximityserver.SingleResponse();
            if (conversationTypeCase_ == ConversationTypeOneofCase.SingleResponse) {
              subBuilder.MergeFrom(SingleResponse);
            }
            input.ReadMessage(subBuilder);
            SingleResponse = subBuilder;
            break;
          }
          case 74: {
            global::Iop.Proximityserver.ConversationResponse subBuilder = new global::Iop.Proximityserver.ConversationResponse();
            if (conversationTypeCase_ == ConversationTypeOneofCase.ConversationResponse) {
              subBuilder.MergeFrom(ConversationResponse);
            }
            input.ReadMessage(subBuilder);
            ConversationResponse = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Single requests live on their own without any session or context. 
  ///  It is always possible to process a single request without any additional informaiton.
  /// </summary>
  public sealed partial class SingleRequest : pb::IMessage<SingleRequest> {
    private static readonly pb::MessageParser<SingleRequest> _parser = new pb::MessageParser<SingleRequest>(() => new SingleRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRequest(SingleRequest other) : this() {
      version_ = other.version_;
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
        case RequestTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRequest Clone() {
      return new SingleRequest(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  VersionType. Protocol version specification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.PingRequest Ping {
      get { return requestTypeCase_ == RequestTypeOneofCase.Ping ? (global::Iop.Proximityserver.PingRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.Ping;
      }
    }

    /// <summary>Field number for the "listRoles" field.</summary>
    public const int ListRolesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.ListRolesRequest ListRoles {
      get { return requestTypeCase_ == RequestTypeOneofCase.ListRoles ? (global::Iop.Proximityserver.ListRolesRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.ListRoles;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "RequestType" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      Ping = 2,
      ListRoles = 3,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(ListRoles, other.ListRoles)) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.Ping) hash ^= Ping.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) hash ^= ListRoles.GetHashCode();
      hash ^= (int) requestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Ping) {
        output.WriteRawTag(18);
        output.WriteMessage(Ping);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) {
        output.WriteRawTag(26);
        output.WriteMessage(ListRoles);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Ping) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListRoles);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleRequest other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Ping:
          Ping = other.Ping;
          break;
        case RequestTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Proximityserver.PingRequest subBuilder = new global::Iop.Proximityserver.PingRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Proximityserver.ListRolesRequest subBuilder = new global::Iop.Proximityserver.ListRolesRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.ListRoles) {
              subBuilder.MergeFrom(ListRoles);
            }
            input.ReadMessage(subBuilder);
            ListRoles = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Single response is a reaction to single request. 
  /// </summary>
  public sealed partial class SingleResponse : pb::IMessage<SingleResponse> {
    private static readonly pb::MessageParser<SingleResponse> _parser = new pb::MessageParser<SingleResponse>(() => new SingleResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleResponse(SingleResponse other) : this() {
      version_ = other.version_;
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
        case ResponseTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleResponse Clone() {
      return new SingleResponse(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  VersionType. See 'SingleRequest.version'. The version of response can be different than the version in request, 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.PingResponse Ping {
      get { return responseTypeCase_ == ResponseTypeOneofCase.Ping ? (global::Iop.Proximityserver.PingResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.Ping;
      }
    }

    /// <summary>Field number for the "listRoles" field.</summary>
    public const int ListRolesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.ListRolesResponse ListRoles {
      get { return responseTypeCase_ == ResponseTypeOneofCase.ListRoles ? (global::Iop.Proximityserver.ListRolesResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.ListRoles;
      }
    }

    private object responseType_;
    /// <summary>Enum of possible cases for the "ResponseType" oneof.</summary>
    public enum ResponseTypeOneofCase {
      None = 0,
      Ping = 2,
      ListRoles = 3,
    }
    private ResponseTypeOneofCase responseTypeCase_ = ResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseTypeOneofCase ResponseTypeCase {
      get { return responseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseType() {
      responseTypeCase_ = ResponseTypeOneofCase.None;
      responseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(ListRoles, other.ListRoles)) return false;
      if (ResponseTypeCase != other.ResponseTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.Ping) hash ^= Ping.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) hash ^= ListRoles.GetHashCode();
      hash ^= (int) responseTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Ping) {
        output.WriteRawTag(18);
        output.WriteMessage(Ping);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) {
        output.WriteRawTag(26);
        output.WriteMessage(ListRoles);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Ping) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListRoles);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleResponse other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Ping:
          Ping = other.Ping;
          break;
        case ResponseTypeOneofCase.ListRoles:
          ListRoles = other.ListRoles;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Proximityserver.PingResponse subBuilder = new global::Iop.Proximityserver.PingResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Proximityserver.ListRolesResponse subBuilder = new global::Iop.Proximityserver.ListRolesResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.ListRoles) {
              subBuilder.MergeFrom(ListRoles);
            }
            input.ReadMessage(subBuilder);
            ListRoles = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Conversation requests live in a session with a context that is important for the interpretation of the requests.
  ///  Unlike single requests, the order of messages is very important as each message may change the session context.
  /// </summary>
  public sealed partial class ConversationRequest : pb::IMessage<ConversationRequest> {
    private static readonly pb::MessageParser<ConversationRequest> _parser = new pb::MessageParser<ConversationRequest>(() => new ConversationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConversationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationRequest(ConversationRequest other) : this() {
      signature_ = other.signature_;
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Start:
          Start = other.Start.Clone();
          break;
        case RequestTypeOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationRequest Clone() {
      return new ConversationRequest(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    ///  Optional (request specific) signature that signs the Protobuf binary form of the included request body or its part.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    /// <summary>
    ///  Request body.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.StartConversationRequest Start {
      get { return requestTypeCase_ == RequestTypeOneofCase.Start ? (global::Iop.Proximityserver.StartConversationRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.Start;
      }
    }

    /// <summary>Field number for the "verifyIdentity" field.</summary>
    public const int VerifyIdentityFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.VerifyIdentityRequest VerifyIdentity {
      get { return requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity ? (global::Iop.Proximityserver.VerifyIdentityRequest) requestType_ : null; }
      set {
        requestType_ = value;
        requestTypeCase_ = value == null ? RequestTypeOneofCase.None : RequestTypeOneofCase.VerifyIdentity;
      }
    }

    private object requestType_;
    /// <summary>Enum of possible cases for the "RequestType" oneof.</summary>
    public enum RequestTypeOneofCase {
      None = 0,
      Start = 2,
      VerifyIdentity = 3,
    }
    private RequestTypeOneofCase requestTypeCase_ = RequestTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestTypeOneofCase RequestTypeCase {
      get { return requestTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      requestTypeCase_ = RequestTypeOneofCase.None;
      requestType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConversationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConversationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(VerifyIdentity, other.VerifyIdentity)) return false;
      if (RequestTypeCase != other.RequestTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.Start) hash ^= Start.GetHashCode();
      if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) hash ^= VerifyIdentity.GetHashCode();
      hash ^= (int) requestTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Signature);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Start) {
        output.WriteRawTag(18);
        output.WriteMessage(Start);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) {
        output.WriteRawTag(26);
        output.WriteMessage(VerifyIdentity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.Start) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VerifyIdentity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConversationRequest other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      switch (other.RequestTypeCase) {
        case RequestTypeOneofCase.Start:
          Start = other.Start;
          break;
        case RequestTypeOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Signature = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Proximityserver.StartConversationRequest subBuilder = new global::Iop.Proximityserver.StartConversationRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.Start) {
              subBuilder.MergeFrom(Start);
            }
            input.ReadMessage(subBuilder);
            Start = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Proximityserver.VerifyIdentityRequest subBuilder = new global::Iop.Proximityserver.VerifyIdentityRequest();
            if (requestTypeCase_ == RequestTypeOneofCase.VerifyIdentity) {
              subBuilder.MergeFrom(VerifyIdentity);
            }
            input.ReadMessage(subBuilder);
            VerifyIdentity = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Conversation response is a reaction to a conversation request.
  /// </summary>
  public sealed partial class ConversationResponse : pb::IMessage<ConversationResponse> {
    private static readonly pb::MessageParser<ConversationResponse> _parser = new pb::MessageParser<ConversationResponse>(() => new ConversationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConversationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationResponse(ConversationResponse other) : this() {
      signature_ = other.signature_;
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Start:
          Start = other.Start.Clone();
          break;
        case ResponseTypeOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConversationResponse Clone() {
      return new ConversationResponse(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    ///  Optional (response specific) signature that signs the Protobuf binary form of the included response body or its part.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    /// <summary>
    ///  Response body.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.StartConversationResponse Start {
      get { return responseTypeCase_ == ResponseTypeOneofCase.Start ? (global::Iop.Proximityserver.StartConversationResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.Start;
      }
    }

    /// <summary>Field number for the "verifyIdentity" field.</summary>
    public const int VerifyIdentityFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.VerifyIdentityResponse VerifyIdentity {
      get { return responseTypeCase_ == ResponseTypeOneofCase.VerifyIdentity ? (global::Iop.Proximityserver.VerifyIdentityResponse) responseType_ : null; }
      set {
        responseType_ = value;
        responseTypeCase_ = value == null ? ResponseTypeOneofCase.None : ResponseTypeOneofCase.VerifyIdentity;
      }
    }

    private object responseType_;
    /// <summary>Enum of possible cases for the "ResponseType" oneof.</summary>
    public enum ResponseTypeOneofCase {
      None = 0,
      Start = 2,
      VerifyIdentity = 3,
    }
    private ResponseTypeOneofCase responseTypeCase_ = ResponseTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseTypeOneofCase ResponseTypeCase {
      get { return responseTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseType() {
      responseTypeCase_ = ResponseTypeOneofCase.None;
      responseType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConversationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConversationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(VerifyIdentity, other.VerifyIdentity)) return false;
      if (ResponseTypeCase != other.ResponseTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.Start) hash ^= Start.GetHashCode();
      if (responseTypeCase_ == ResponseTypeOneofCase.VerifyIdentity) hash ^= VerifyIdentity.GetHashCode();
      hash ^= (int) responseTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Signature);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Start) {
        output.WriteRawTag(18);
        output.WriteMessage(Start);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.VerifyIdentity) {
        output.WriteRawTag(26);
        output.WriteMessage(VerifyIdentity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.Start) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (responseTypeCase_ == ResponseTypeOneofCase.VerifyIdentity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VerifyIdentity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConversationResponse other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      switch (other.ResponseTypeCase) {
        case ResponseTypeOneofCase.Start:
          Start = other.Start;
          break;
        case ResponseTypeOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Signature = input.ReadBytes();
            break;
          }
          case 18: {
            global::Iop.Proximityserver.StartConversationResponse subBuilder = new global::Iop.Proximityserver.StartConversationResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.Start) {
              subBuilder.MergeFrom(Start);
            }
            input.ReadMessage(subBuilder);
            Start = subBuilder;
            break;
          }
          case 26: {
            global::Iop.Proximityserver.VerifyIdentityResponse subBuilder = new global::Iop.Proximityserver.VerifyIdentityResponse();
            if (responseTypeCase_ == ResponseTypeOneofCase.VerifyIdentity) {
              subBuilder.MergeFrom(VerifyIdentity);
            }
            input.ReadMessage(subBuilder);
            VerifyIdentity = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  An administrative message to test whether the peer is there and responds to requests.
  ///
  ///  Each identity client is required to send a message not more than 60 seconds after the connection 
  ///  was established, or after the last message has been send over the connection. For server clients,
  ///  this limit is 300 seconds. Clients should use PingRequest if they have nothing else to send
  ///  and want to keep the connection open.
  ///
  ///  Roles: any
  /// </summary>
  public sealed partial class PingRequest : pb::IMessage<PingRequest> {
    private static readonly pb::MessageParser<PingRequest> _parser = new pb::MessageParser<PingRequest>(() => new PingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest(PingRequest other) : this() {
      payload_ = other.payload_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest Clone() {
      return new PingRequest(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    ///  At most 64 bytes of arbitrary data that will be sent back by the peer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A response to PingRequest to reassure the connection works fine.
  /// </summary>
  public sealed partial class PingResponse : pb::IMessage<PingResponse> {
    private static readonly pb::MessageParser<PingResponse> _parser = new pb::MessageParser<PingResponse>(() => new PingResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse(PingResponse other) : this() {
      payload_ = other.payload_;
      clock_ = other.clock_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse Clone() {
      return new PingResponse(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    ///  See 'PingRequest.payload'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clock" field.</summary>
    public const int ClockFieldNumber = 2;
    private long clock_;
    /// <summary>
    ///  TimestampType. Clock on the requestee's machine.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Clock {
      get { return clock_; }
      set {
        clock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      if (Clock != other.Clock) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (Clock != 0L) hash ^= Clock.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
      if (Clock != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Clock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (Clock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Clock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingResponse other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.Clock != 0L) {
        Clock = other.Clock;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
          case 16: {
            Clock = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Request server to provide a mapping between ports and roles.
  ///
  ///  Roles: primary
  /// </summary>
  public sealed partial class ListRolesRequest : pb::IMessage<ListRolesRequest> {
    private static readonly pb::MessageParser<ListRolesRequest> _parser = new pb::MessageParser<ListRolesRequest>(() => new ListRolesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRolesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesRequest(ListRolesRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesRequest Clone() {
      return new ListRolesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRolesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRolesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRolesRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  A response to ListRolesRequest with a list of all open ports and associated roles.
  /// </summary>
  public sealed partial class ListRolesResponse : pb::IMessage<ListRolesResponse> {
    private static readonly pb::MessageParser<ListRolesResponse> _parser = new pb::MessageParser<ListRolesResponse>(() => new ListRolesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRolesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesResponse(ListRolesResponse other) : this() {
      roles_ = other.roles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListRolesResponse Clone() {
      return new ListRolesResponse(this);
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Iop.Proximityserver.ServerRole> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(10, global::Iop.Proximityserver.ServerRole.Parser);
    private readonly pbc::RepeatedField<global::Iop.Proximityserver.ServerRole> roles_ = new pbc::RepeatedField<global::Iop.Proximityserver.ServerRole>();
    /// <summary>
    ///  List of server roles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Iop.Proximityserver.ServerRole> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListRolesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListRolesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roles_.Equals(other.roles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roles_.WriteTo(output, _repeated_roles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roles_.CalculateSize(_repeated_roles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListRolesResponse other) {
      if (other == null) {
        return;
      }
      roles_.Add(other.roles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Description of a single server role.
  /// </summary>
  public sealed partial class ServerRole : pb::IMessage<ServerRole> {
    private static readonly pb::MessageParser<ServerRole> _parser = new pb::MessageParser<ServerRole>(() => new ServerRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRole(ServerRole other) : this() {
      role_ = other.role_;
      port_ = other.port_;
      isTcp_ = other.isTcp_;
      isTls_ = other.isTls_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerRole Clone() {
      return new ServerRole(this);
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private global::Iop.Proximityserver.ServerRoleType role_ = 0;
    /// <summary>
    ///  Server role type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Iop.Proximityserver.ServerRoleType Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    /// <summary>
    ///  On which port is this server role provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "isTcp" field.</summary>
    public const int IsTcpFieldNumber = 3;
    private bool isTcp_;
    /// <summary>
    ///  true if the port is TCP port, false means UDP.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTcp {
      get { return isTcp_; }
      set {
        isTcp_ = value;
      }
    }

    /// <summary>Field number for the "isTls" field.</summary>
    public const int IsTlsFieldNumber = 4;
    private bool isTls_;
    /// <summary>
    ///  true if the port is TLS encrypted, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTls {
      get { return isTls_; }
      set {
        isTls_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Role != other.Role) return false;
      if (Port != other.Port) return false;
      if (IsTcp != other.IsTcp) return false;
      if (IsTls != other.IsTls) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Role != 0) hash ^= Role.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (IsTcp != false) hash ^= IsTcp.GetHashCode();
      if (IsTls != false) hash ^= IsTls.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Role != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Role);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (IsTcp != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsTcp);
      }
      if (IsTls != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsTls);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (IsTcp != false) {
        size += 1 + 1;
      }
      if (IsTls != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerRole other) {
      if (other == null) {
        return;
      }
      if (other.Role != 0) {
        Role = other.Role;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.IsTcp != false) {
        IsTcp = other.IsTcp;
      }
      if (other.IsTls != false) {
        IsTls = other.IsTls;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            role_ = (global::Iop.Proximityserver.ServerRoleType) input.ReadEnum();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
          case 24: {
            IsTcp = input.ReadBool();
            break;
          }
          case 32: {
            IsTls = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  Every conversation starts with this request, in which the requestor sends a list of protocol versions 
  ///  it supports and its public key that identifies it.
  ///
  ///  Roles: any
  ///
  ///  Conversation status: NoConversation
  /// </summary>
  public sealed partial class StartConversationRequest : pb::IMessage<StartConversationRequest> {
    private static readonly pb::MessageParser<StartConversationRequest> _parser = new pb::MessageParser<StartConversationRequest>(() => new StartConversationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartConversationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationRequest(StartConversationRequest other) : this() {
      supportedVersions_ = other.supportedVersions_.Clone();
      publicKey_ = other.publicKey_;
      clientChallenge_ = other.clientChallenge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationRequest Clone() {
      return new StartConversationRequest(this);
    }

    /// <summary>Field number for the "supportedVersions" field.</summary>
    public const int SupportedVersionsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_supportedVersions_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> supportedVersions_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///  List of VersionType items. Ordered by requestor's preference. See 'SingleRequest.version'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> SupportedVersions {
      get { return supportedVersions_; }
    }

    /// <summary>Field number for the "publicKey" field.</summary>
    public const int PublicKeyFieldNumber = 2;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  Public key of the requestor. Max 128 bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientChallenge" field.</summary>
    public const int ClientChallengeFieldNumber = 3;
    private pb::ByteString clientChallenge_ = pb::ByteString.Empty;
    /// <summary>
    ///  32 byte challenge data (random bytes generated by the requestor) that is used for authentication purposes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientChallenge {
      get { return clientChallenge_; }
      set {
        clientChallenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartConversationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartConversationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!supportedVersions_.Equals(other.supportedVersions_)) return false;
      if (PublicKey != other.PublicKey) return false;
      if (ClientChallenge != other.ClientChallenge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= supportedVersions_.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (ClientChallenge.Length != 0) hash ^= ClientChallenge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      supportedVersions_.WriteTo(output, _repeated_supportedVersions_codec);
      if (PublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PublicKey);
      }
      if (ClientChallenge.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ClientChallenge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += supportedVersions_.CalculateSize(_repeated_supportedVersions_codec);
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (ClientChallenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientChallenge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartConversationRequest other) {
      if (other == null) {
        return;
      }
      supportedVersions_.Add(other.supportedVersions_);
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.ClientChallenge.Length != 0) {
        ClientChallenge = other.ClientChallenge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            supportedVersions_.AddEntriesFrom(input, _repeated_supportedVersions_codec);
            break;
          }
          case 18: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 26: {
            ClientChallenge = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to StartConversationRequest in case the requestee found at least one protocol version that 
  ///  both peers are willing to use. 
  ///  
  ///  The 'clientChallenge' field value in raw format is signed with a signature in 'ConversationResponse.signature'.
  ///  
  ///
  ///  After StartConversationResponse is sent, the conversation context includes version and keys of both peers.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "publicKey" - 'StartConversationRequest.publicKey' is not a valid public key value. 
  ///      * Response.details == "clientChallenge" - 'StartConversationRequest.clientChallenge' is not 32 byte long. 
  /// </summary>
  public sealed partial class StartConversationResponse : pb::IMessage<StartConversationResponse> {
    private static readonly pb::MessageParser<StartConversationResponse> _parser = new pb::MessageParser<StartConversationResponse>(() => new StartConversationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartConversationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationResponse(StartConversationResponse other) : this() {
      version_ = other.version_;
      publicKey_ = other.publicKey_;
      challenge_ = other.challenge_;
      clientChallenge_ = other.clientChallenge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartConversationResponse Clone() {
      return new StartConversationResponse(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private pb::ByteString version_ = pb::ByteString.Empty;
    /// <summary>
    ///  VersionType. The version that the requestee selected from the offered set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publicKey" field.</summary>
    public const int PublicKeyFieldNumber = 2;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    ///  Public key of the requestee.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 3;
    private pb::ByteString challenge_ = pb::ByteString.Empty;
    /// <summary>
    ///  32 byte challenge data (random bytes generated by the requestee) that is used for later authentication purposes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Challenge {
      get { return challenge_; }
      set {
        challenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientChallenge" field.</summary>
    public const int ClientChallengeFieldNumber = 4;
    private pb::ByteString clientChallenge_ = pb::ByteString.Empty;
    /// <summary>
    ///  Copy of 'StartConversationRequest.clientChallenge' that is signed by the requestee. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientChallenge {
      get { return clientChallenge_; }
      set {
        clientChallenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartConversationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartConversationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (PublicKey != other.PublicKey) return false;
      if (Challenge != other.Challenge) return false;
      if (ClientChallenge != other.ClientChallenge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (Challenge.Length != 0) hash ^= Challenge.GetHashCode();
      if (ClientChallenge.Length != 0) hash ^= ClientChallenge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Version);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PublicKey);
      }
      if (Challenge.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Challenge);
      }
      if (ClientChallenge.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ClientChallenge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (Challenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Challenge);
      }
      if (ClientChallenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientChallenge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartConversationResponse other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.Challenge.Length != 0) {
        Challenge = other.Challenge;
      }
      if (other.ClientChallenge.Length != 0) {
        ClientChallenge = other.ClientChallenge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadBytes();
            break;
          }
          case 18: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 26: {
            Challenge = input.ReadBytes();
            break;
          }
          case 34: {
            ClientChallenge = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  
  ///  A client verifies its public key by signing the challenge. The client has to provide a signature in 'ConversationRequest.signature'.
  ///
  ///  Roles: neighbor, client
  ///
  ///  Conversation status: ConversationStarted
  /// </summary>
  public sealed partial class VerifyIdentityRequest : pb::IMessage<VerifyIdentityRequest> {
    private static readonly pb::MessageParser<VerifyIdentityRequest> _parser = new pb::MessageParser<VerifyIdentityRequest>(() => new VerifyIdentityRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyIdentityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityRequest(VerifyIdentityRequest other) : this() {
      challenge_ = other.challenge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityRequest Clone() {
      return new VerifyIdentityRequest(this);
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 1;
    private pb::ByteString challenge_ = pb::ByteString.Empty;
    /// <summary>
    ///  The exact copy of 'StartConversationResponse.challenge' from the start of the conversation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Challenge {
      get { return challenge_; }
      set {
        challenge_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyIdentityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyIdentityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Challenge != other.Challenge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Challenge.Length != 0) hash ^= Challenge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Challenge.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Challenge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Challenge.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Challenge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyIdentityRequest other) {
      if (other == null) {
        return;
      }
      if (other.Challenge.Length != 0) {
        Challenge = other.Challenge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Challenge = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///  A response to VerifyIdentityRequest. If no error occurs, the conversation status is upgraded to Verified.
  ///
  ///  Specific Error Responses:
  ///    * ERROR_INVALID_SIGNATURE - The client's signature of the challenge is not valid.
  ///    * ERROR_INVALID_VALUE
  ///      * Response.details == "challenge" - 'VerifyIdentityRequest.challenge' is not the exact copy of 'StartConversationResponse.challenge' from the start of the conversation.
  /// </summary>
  public sealed partial class VerifyIdentityResponse : pb::IMessage<VerifyIdentityResponse> {
    private static readonly pb::MessageParser<VerifyIdentityResponse> _parser = new pb::MessageParser<VerifyIdentityResponse>(() => new VerifyIdentityResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyIdentityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Iop.Proximityserver.IopProximityServerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityResponse(VerifyIdentityResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyIdentityResponse Clone() {
      return new VerifyIdentityResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyIdentityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyIdentityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyIdentityResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
